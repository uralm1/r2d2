package Gwsyn::Plugin::tc_utils;
use Mojo::Base 'Mojolicious::Plugin';

use Mojo::File qw(path);
use Carp;

sub register {
  my ($self, $app, $args) = @_;
  $args ||= {};

  # internal
  # $_print_block->($fh, $tc_path, $traf_rule_id, $data_hashref);
  my $_print_block = sub {
    my ($fh, $tc_path, $rule_id, $dh) = @_;

    print $fh "# $rule_id $dh->{id}\n";
    print $fh "$tc_path class add dev \$INTR_IF parent 1:10 classid 1:$rule_id htb $dh->{speed_in}\n";
    print $fh "$tc_path qdisc add dev \$INTR_IF parent 1:$rule_id handle $rule_id: pfifo limit 100\n";
    print $fh "$tc_path filter add dev \$INTR_IF parent 1:0 protocol ip pref 10 u32 match ip dst $dh->{ip} flowid 1:$rule_id\n";
    print $fh "$tc_path class add dev \$EXTR_IF parent 1:10 classid 1:$rule_id htb $dh->{speed_out}\n";
    print $fh "$tc_path qdisc add dev \$EXTR_IF parent 1:$rule_id handle $rule_id: pfifo limit 100\n";
    print $fh "$tc_path filter add dev \$EXTR_IF parent 1:0 protocol ip pref 10 u32 match ip src $dh->{ip} flowid 1:$rule_id\n";
    print $fh "\n";
  };


  # my $resp = tc_add_replace({id=>11, ip=>'1.2.3.4', speed_in=>'', speed_out=>''});
  # returns 1-need apply/0-not needed on success,
  #   dies with 'error string' on error,
  $app->helper(tc_add_replace => sub {
    my ($self, $v) = @_;
    croak 'Bad argument' unless $v;

    $v->{speed_in} ||= "quantum 6400 rate 256kbit prio 5";
    $v->{speed_out} ||= "quantum 6400 rate 256kbit prio 5";

    my $tcfile = path($self->config('tc_file'));
    my $tc_path = $self->config('tc_path');
    my $fh = eval { $tcfile->open('<') } or die "Can't read tc file: $!";
    chomp(my @content = <$fh>);
    $fh->close or die "Can't close tc file: $!";

    $fh = eval { $tcfile->open('>') } or die "Can't reopen tc file: $!";
    my $ret = 0;
    my $ff = 0;
    my $max_traf_id = 300;
    my $cur_traf_id;
    my $skip = 0;
    my $skip_duplicate = 0;

    for (@content) {
      # WARNING: this is autogenerated file, don't run or change it!
      # 300 450
      #(1)/usr/sbin/tc class add dev $INTR_IF parent 1:10 classid 1:300 htb quantum 6400 rate 1mbit prio 5
      #(2)/usr/sbin/tc qdisc add dev $INTR_IF parent 1:300 handle 300: pfifo limit 100
      #(3)/usr/sbin/tc filter add dev $INTR_IF parent 1:0 protocol ip pref 10 u32 match ip dst 192.168.34.23 flowid 1:300
      #(4)/usr/sbin/tc class add dev $EXTR_IF parent 1:10 classid 1:300 htb quantum 6400 rate 2mbit prio 5
      #(5)/usr/sbin/tc qdisc add dev $EXTR_IF parent 1:300 handle 300: pfifo limit 100
      #(6)/usr/sbin/tc filter add dev $EXTR_IF parent 1:0 protocol ip pref 10 u32 match ip src 192.168.34.23 flowid 1:300
      #(7)
      if ($skip > 0) {
        if (/^\Q$tc_path\E/x) {
          #say "Skipped line ($skip) $_";
          $skip++;
          next;
        } elsif (/^$/x) {
          unless ($skip_duplicate) {
            # here actual replace, use same traf_id ($cur_traf_id)
            $_print_block->($fh, $tc_path, $cur_traf_id, $v);
          } else {
            $skip_duplicate = 0;
          }
          $skip = 0;
          next;
        } else {
          $ff = 0; # incorrect situation, abort skip mode, add rules thereafter to keep formatting good
          $skip = 0;
        }
      }
      if (/^\#\ (\d+)\ (\d+)$/x) {
        #say "$_, TRAFID: $1, ID: $2";
        # calculate max_traf_id
        $max_traf_id = $1 if $1 > $max_traf_id;

        if ($2 == $v->{id}) {
          if (!$ff) {
            # replace same id but after skip
            #say "Skipped line ($skip) $_";
            $ff = 1;
            $cur_traf_id = $1;
          } else {
            # secondary duplicating id - skip it
            $self->rlog("Found duplicate ID in tc file, conflicting lines deleted.");
            $skip_duplicate = 1;
          }
          $skip = 1;
          $ret = 1;
          next;
        }
      }
      print $fh "$_\n"; # just copy other lines
    }

    if (!$ff or ($skip > 0 and !$skip_duplicate)) { # if not found or last line, add new
      $max_traf_id++;
      $max_traf_id = $cur_traf_id if $skip > 0; # on last line use stored traf_id
      $_print_block->($fh, $tc_path, $max_traf_id, $v);
      $ret = 1;
    }

    $fh->close or die "Can't close tc file: $!";

    return $ret;
  });


  # my $resp = tc_delete($id);
  # returns 1-need apply/0-not needed on success,
  #   dies with 'error string' on error
  $app->helper(tc_delete => sub {
    my ($self, $id) = @_;
    croak 'Bad argument' unless defined $id;

    my $tcfile = path($self->config('tc_file'));
    my $tc_path = $self->config('tc_path');
    my $fh = eval { $tcfile->open('<') } or die "Can't read tc file: $!";
    chomp(my @content = <$fh>);
    $fh->close or die "Can't close tc file: $!";

    $fh = eval { $tcfile->open('>') } or die "Can't reopen tc file: $!";
    my $ret = 0;
    my $skip = 0;

    for (@content) {
      # WARNING: this is autogenerated file, don't run or change it!
      # 300 450
      #(1)/usr/sbin/tc class add dev $INTR_IF parent 1:10 classid 1:300 htb quantum 6400 rate 1mbit prio 5
      #(2)/usr/sbin/tc qdisc add dev $INTR_IF parent 1:300 handle 300: pfifo limit 100
      #(3)/usr/sbin/tc filter add dev $INTR_IF parent 1:0 protocol ip pref 10 u32 match ip dst 192.168.34.23 flowid 1:300
      #(4)/usr/sbin/tc class add dev $EXTR_IF parent 1:10 classid 1:300 htb quantum 6400 rate 2mbit prio 5
      #(5)/usr/sbin/tc qdisc add dev $EXTR_IF parent 1:300 handle 300: pfifo limit 100
      #(6)/usr/sbin/tc filter add dev $EXTR_IF parent 1:0 protocol ip pref 10 u32 match ip src 192.168.34.23 flowid 1:300
      #(7)
      if ($skip > 0) {
        if (/^\Q$tc_path\E/x) {
          #say "Skipped line ($skip) $_";
          $skip++;
          next;
        } elsif (/^$/x) {
          $skip = 0;
          next;
        } else {
          $skip = 0;
        }
      }
      if (/^\#\ \d+\ \Q$id\E$/x) {
        #say "Skipped line ($skip) $_";
        $self->rlog("Found duplicate ID in tc file, conflicting lines deleted.") if $ret;
        $skip = 1;
        $ret = 1;
        next;
      }
      print $fh "$_\n"; # just copy other lines
    }

    $fh->close or die "Can't close tc file: $!";

    return $ret;
  });


  # my $resp = tc_create_full([{id=>11, ip=>'1.2.3.4', speed_in=>'', speed_out=>''}, ...]);
  # fully updates /var/r2d2/traf.clients,
  # returns 1-need apply/0-not needed on success,
  #   dies with 'error string' on error,
  $app->helper(tc_create_full => sub {
    my ($self, $va) = @_;
    croak 'Bad argument' unless $va;

    my $tcfile = path($self->config('tc_file'));
    my $tc_path = $self->config('tc_path');

    my $fh = eval { $tcfile->open('>') } or die "Can't create tc file: $!";

    print $fh "# WARNING: this is autogenerated file, don't run or change it!\n\n";
    my $traf_id_counter = 300; # start client classid

    # data
    for (@$va) {
      next if !$self->is_myprofile($_->{profile}); # skip clients from invalid profiles
      $_->{speed_in} ||= "quantum 6400 rate 256kbit prio 5";
      $_->{speed_out} ||= "quantum 6400 rate 256kbit prio 5";
      $_print_block->($fh, $tc_path, $traf_id_counter++, $_);
    }

    $fh->close or die "Can't close tc file: $!";

    # always need apply
    return 1;
  });


  # my $err = $app->tc_apply()
  # returns 1-success, dies on error
  $app->helper(tc_apply => sub {
    my $self = shift;

    # rerun script to reload rules
    if (!$self->system("sh /etc/tc.user_r2d2")) {
      return 1; # success
    } else {
      die "tc.user_r2d2 script error\n";
    }
  });

}

1;
