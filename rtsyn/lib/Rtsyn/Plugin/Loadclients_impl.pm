package Rtsyn::Plugin::Loadclients_impl;
use Mojo::Base 'Mojolicious::Plugin';

use Mojo::File qw(tempfile);
use Mojo::UserAgent;

#use Carp;

sub register {
  my ($self, $app, $args) = @_;
  $args ||= {};

  # build rulefile and load it to iptables (blocking)
  # doesn't log anything to remote log, returns 1-success, dies on error
  $app->helper(load_clients => sub {
    my $self = shift;

    my $prof = $self->config('my_profile');
    my $res = eval {
      my $tx = $self->ua->get($self->config('head_url')."/clients/$prof" => {Accept => 'application/json'});
      $tx->result;
    };

    die "connection to head failed: $@" unless defined $res;
    die "clients request error: ".(($res->is_error) ? substr($res->body, 0, 40) : 'none') unless $res->is_success;

    my $v = $res->json;
    die 'clients response json error' unless $v;

    # create rule-file
    my $rulefile = tempfile;
    my $fh = eval { $rulefile->open('>') } or die "Can't create temporary file: $!";

    my $client_out_chain = $self->config('client_out_chain');

    # header
    print $fh "# WARNING: this is autogenerated file, don't run or change it!\n\n";
    print $fh "*mangle\n";
    print $fh ":$client_out_chain - [0:0]\n\n";

    # data
    for (@$v) {
      #print $fh "# $_->{id}: $_->{login}\n";
      print $fh "-A $client_out_chain -s $_->{ip} -m comment --comment $_->{id} ".$self->rt_marks($_->{rt})."\n";
    }

    # footer
    print $fh "COMMIT\n";
    $fh->close or die "Can't close temporary file: $!";

    # load rules with iptables_restore
    # note: iptables_restore still flushes user chains mentioned in file
    if ($self->system(iptables_restore => "--noflush < $rulefile")) {
      die "Can't activate iptables configuration";
    }
    return 1; # success

  });
}


1;
