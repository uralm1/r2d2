#! ./perl
# This is the part of R2D2
# Windows DHCP syncronizer
# author: Ural Khassanov, 2013

use strict;
use warnings;
use DBI;
use Encode;
use NetAddr::IP::Lite;
use NetAddr::MAC;
use FindBin;
#use Data::Dumper;
use v5.12;

my $agent_name = 'dhcpsyn';
my $version = 'r2d2.dhcpsyn damaged brain v1.15';

my $cfg;
{ # slurp config
  open my $fh, '<', "$FindBin::Bin\\r2d2.conf" or die "Can't read config file!\n";
  local $/ = undef;
  $cfg = eval <$fh>;
  close $fh;
}
die "Error found in config file.\n" if (!$cfg or ref($cfg) ne 'HASH');

my $dhcpfile = 'reservedip.cmd';
my $dhcpscope = $cfg->{dhcpscope};

my $dbh_inet = DBI->connect("DBI:mysql:database=$cfg->{db};host=$cfg->{dbhost}", $cfg->{dbuser}, $cfg->{dbpass})
  or die "Connection to database $cfg->{db} failed!\n";

$dbh_inet->do("SET NAMES 'UTF8'");

###
dblog("DHCP syncronization started ($version).");

my $s = $dbh_inet->prepare("SELECT clients.login, ip, mac, no_dhcp \
FROM clients, clients_sync s WHERE s.sync_dhcp = '1' AND clients.login = s.login ORDER BY ip ASC");
$s->execute;

my @dumps;
# create dumps if update requested
if ($s->rows > 0) {
  foreach $ds (@{$cfg->{dhcpservers}}) {
    my @dump = `netsh dhcp server $ds scope $dhcpscope dump`;
    if (!$?) {
      push @dumps, \@dump;
    } else {
      dblog("Error dumping dhcp server $ds! Fatal error.");
      die; # this is fatal
    }
  }
}

###foreach $l (@{$dumps[1]}) { print "$l"; }

my $syn_counter = 0;

while (my ($login, $dbip, $dbmac, $no_dhcp) = $s->fetchrow_array) {
  # update dhcp and reset sync flags
  my $ipo = NetAddr::IP::Lite->new($dbip);
  unless ($ipo) {
    dblog("Invalid ip address $dbip, $login!");
    next;
  }
  my $ip = $ipo->addr;
  my $maco = eval { NetAddr::MAC->new($dbmac) };
  if ($@) {
    dblog("Invalid mac address $dbmac, $login!");
    next;
  }
  my $mac = $maco->as_basic;

  my $tt = ($no_dhcp) ? ' (only cleanup, *client doesnt use dhcp*)' : '';
  dblog("Updating dhcp: $login, $ip, $mac$tt");

  my $i = 0;
  my $failure = 0;
  foreach $ds (@{$cfg->{dhcpservers}}) {
    # delete old reservedip or reservedmac
    foreach $l (@{$dumps[$i]}) {
      if ($l =~ /^dhcp server \Q$ds\E scope \Q$dhcpscope\E add reservedip \Q$ip\E (\w+)\s/i) {
        dblog("Deleting found reservedip $ip, mac $1 on dhcp server $ds.");
        !system("netsh dhcp server $ds scope $dhcpscope delete reservedip $ip $1") or
          dblog("Error deleting old reservedip $ip on dhcp server $ds!");
      } elsif ($l =~ /^dhcp server \Q$ds\E scope \Q$dhcpscope\E add reservedip ((?:\w|\.)+) \Q$mac\E\s/i) {
        dblog("Deleting found reservedmac $mac, ip $1 on dhcp server $ds.");
        !system("netsh dhcp server $ds scope $dhcpscope delete reservedip $1 $mac") or
          dblog("Error deleting old reservedmac $mac on dhcp server $ds!");
      }
    }

    unless ($no_dhcp) {
      # add new reservedip
      dblog("Adding new reservedip $ip, mac $mac to dhcp server $ds.");
      if (system("netsh dhcp server $ds scope $dhcpscope add reservedip $ip $mac $login")) {
        dblog("Error adding new reservedip $ip mac $mac on dhcp server $ds!");
        $failure = 1;
      }
    }

    $i++;
  }

  # update sync flag
  if (!$failure) {
    my $q_login = $dbh_inet->quote($login);
    $dbh_inet->do("UPDATE clients_sync SET sync_dhcp = '0' WHERE login = $q_login");
  }

  $syn_counter++;
}
$s->finish;

# write dhcp-file
if ($syn_counter > 0) {
  dblog("Updating dhcp-file: $dhcpfile");
  if (!open(DHCPFILE, '>', $dhcpfile)) {
    dblog("Can't create dhcp-file!");
    die;
  }
  print DHCPFILE "\@rem WARNING: this is autogenerated file, don't run or change it!\n\n";

  $s= $dbh_inet->prepare("SELECT login, clients.desc, ip, mac, no_dhcp \
FROM clients ORDER BY ip ASC");
  $s->execute;

  while (my ($login, $desc, $dbip, $dbmac, $no_dhcp) = $s->fetchrow_array) {
    my $ipo = NetAddr::IP::Lite->new($dbip);
    unless ($ipo) {
      dblog("Invalid ip address $dbip, $login!");
      next;
    }
    my $ip = $ipo->addr;
    my $maco = eval { NetAddr::MAC->new($dbmac) };
    if ($@) {
      dblog("Invalid mac address $dbmac, $login!");
      next;
    }
    my $mac = $maco->as_basic;

    Encode::from_to($desc, 'utf-8', 'windows-1251');
    print DHCPFILE "\@rem $login"; print DHCPFILE ", $desc" if ($desc); print DHCPFILE "\n";
    if ($no_dhcp) {
      print DHCPFILE "\@rem Client doesn\'t use DHCP.\n";
    } else {
      #print DHCPFILE "\@call dhc add $ip $mac $login\n";
      foreach (@{$cfg->{dhcpservers}}) {
        print DHCPFILE "\@netsh dhcp server $_ scope $dhcpscope add reservedip $ip $mac $login\n";
      }
    }
    print DHCPFILE "\n";
  }
  $s->finish;
  close DHCPFILE;
}

dblog('DHCP syncronization finished.');
$dbh_inet->disconnect;

exit;


# dblog("msg");
sub dblog {
  my $q_msg = $dbh_inet->quote($agent_name.': '.shift);
  $dbh_inet->do("REPLACE INTO log_agents \
SET row_id = (SELECT COALESCE(MAX(log_id), 0) % 5000 + 1 \
FROM log_agents AS t), \
msg = $q_msg");
}


__END__
